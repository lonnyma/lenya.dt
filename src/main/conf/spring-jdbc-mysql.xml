<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    
   <!--  <bean id="redisCacheImpl" class="cn.lenya.soft.db.redis.RedisCacheImpl"/>
	<bean id="springUtil" class="cn.lenya.soft.common.utils.SpringUtil"  scope="singleton" />
 -->
 
 <!--======== 定义数据源，使用wildfly数据源实现======================= -->
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:/MySQLDS</value>
		</property>
		<property name="resourceRef">
			<value>false</value>
		</property>		
	</bean> -->
 
 
<!--======== 定义数据源，使用weblogic数据源实现======================= -->
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName"> -->
<!-- 			<value>jdbc/mysql</value> -->
<!-- 		</property> -->
<!-- 		<property name="resourceRef"> -->
<!-- 			<value>false</value> -->
<!-- 		</property> -->
<!-- 		<property name="jndiEnvironment"> -->
<!-- 			<props> -->
<!-- 				<prop key="java.naming.provider.url">t3://127.0.0.1:7001</prop>				 -->
<!-- 				<prop key="java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	

<!-- 	==========数据库连接池c3p0==========  -->
<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> -->
<!-- 	    <property name="driverClass"><value>${mjdbc.classDriverName}</value></property> -->
<!-- 		<property name="jdbcUrl"><value>${mjdbc.url}</value></property> -->
<!-- 		<property name="user"><value>${mjdbc.userName}</value></property> -->
<!-- 		<property name="password"><value>${mjdbc.userPassword}</value></property> -->
<!-- 		<property name="autoCommitOnClose" ><value>${mjdbc.autoCommitOnClose}</value></property> -->
<!-- 		<property name="checkoutTimeout" ><value>${mjdbc.getConnTime}</value></property> -->
<!-- 		<property name="initialPoolSize" ><value>${mjdbc.initConnSize}</value></property> -->
<!-- 		<property name="minPoolSize" ><value>${mjdbc.minConnSize}</value></property> -->
<!-- 		<property name="maxPoolSize" ><value>${mjdbc.maxConnSize}</value></property> -->
<!-- 		<property name="maxIdleTime" ><value>${mjdbc.maxFreeTime}</value></property> -->
<!-- 		<property name="acquireIncrement" ><value>${mjdbc.acquireIncrement}</value></property> -->
<!-- 		<property name="maxIdleTimeExcessConnections" ><value>${mjdbc.maxIdleTimeExcessConnections}</value></property> -->
<!-- 	</bean> -->
<!-- 	druid   Alibaba数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="driverClassName"><value>${mjdbc.classDriverName}</value></property>
			<!-- 基本属性 url、user、password -->
			<property name="url" ><value>${mjdbc.url}</value></property>
			<property name="username" ><value>${mjdbc.userName}</value></property>
			<property name="password" ><value>${mjdbc.userPassword}</value></property>
		
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${mjdbc.initConnSize}" />
			<property name="minIdle" value="${mjdbc.minConnSize}" />
			<property name="maxActive" value="${mjdbc.maxConnSize}" />
		
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
		
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
		
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
		
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
		
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat,log4j" />
		</bean>


	<!--事务模板 -->
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager">
		</property>
	</bean>
	<!-- jdbc事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource">
		</property>
	</bean>
   
   <!-- 采用@Transaction注解方式使用事务transaction-manager：指定事务管理器 -->
   <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
